class node // doubly circular
{
  node prev;
  node next;
  int data;
  node(int d)
  {
      data=d;
      next=null;
      prev=null;
  }
}

class circularlist
{
    node head=null;
    void insert(int d)
    {
        node nnode=new node(d);
        if(head==null)
        {
           head=nnode;
           head.next=nnode;
           head.prev=nnode;
        }
        else
        {
            node last=head.prev;
            last.next=nnode;
            nnode.prev=last;
            head.prev=nnode;
            nnode.next=head;
        }
    }
    
    int delete()
    {
        if(head==null)
        {
            System.out.println("list empty");
            return -1;
        }
        else if(head.next==head)
        {
            int temp=head.data;
            head=null;
            return temp;
        }
        else 
        {
            int temp=head.data;
            node last=head.prev;
            last.next=head.next;
            head.next.prev=last;
           head=head.next;
           return temp;
        }
    }
    
    void display()
    {
        if(head==null)
        {
            System.out.println("list empty");
        }
        else
        {
            node temp=head;
            do 
            {
                System.out.print(temp.data+" ");
                temp=temp.next;
            }while(temp!=head);
        }
        System.out.println();
    }
}

public class Main 
{
    public static void main(String ar[])
    {
        circularlist c1=new circularlist();
        c1.insert(90);
        c1.insert(54);
        c1.insert(45);
        c1.insert(43);
        c1.insert(61);
        c1.display();
        c1.delete();
        c1.display();
        c1.delete();
        c1.display();
        c1.delete();
        c1.display();
        c1.delete();
        c1.display();
        c1.delete();
        c1.display();
        c1.insert(51);
        c1.insert(40);
        c1.display();
        
    }
}

===================================================================================================================

stack in linked list:


class node 
{
    int data;
    node next;
    node(int d)
    {
        data=d;
        next=null;
    }
}


class stack 
{
    node top=null;
    void push(int d)
    {
        node nnode=new node(d);
        if(top==null)
        top=nnode;
        else{
            nnode.next=top;
            top=nnode;
        }
    }
    
    boolean empty()
    {
        return top==null;
    }
    
    int pop()
    {
        if(empty())
        {
            System.out.print("Stack is empty");
            return -1;
        }
        else
        {
            int temp=top.data;
            top=top.next;
            return temp;
        }
    }
    int peek()
    {
        if(empty())
        {
            System.out.print("Stack is empty");
            return -1;
        }
        else
        {
            return top.data;
        }
    }
    
    void display()
    {
         if(empty())
        {
            System.out.print("Stack is empty");
            return;
        }
        else
        {
            node temp=top;
            while(temp!=null)
            {
                System.out.print(temp.data+" ");
                temp=temp.next;
            }
            System.out.println();
        }
    }
}

public class Main 
{
    public static void main(String ar[])
    {
       stack s1=new stack();
       s1.push(89);
       s1.push(45);
       s1.push(32);
       
       s1.display();
       s1.pop();
       s1.display();
       s1.pop();
       s1.display();
       s1.pop();
       s1.display();
    }
}
===================================================================================================================

class Solution {
    public int calculate(String s) {
        Stack<Integer> s1=new Stack<>();
        char operator='+';
        int num=0;
        for(int i=0;i<s.length();i++)
        {
            char current=s.charAt(i);
            if(current>='0'&&current<='9')
            num=num*10+(current-'0');
            if(i==s.length()-1||current=='+'||current=='-'||current=='*'||current=='/')
            {
                switch(operator)
                {
                    case '+':s1.push(num);break;
                    case '-':s1.push(-num);break;
                    case '/':s1.push(s1.pop()/num);break;
                    case '*':s1.push(s1.pop()*num);break;
                }
                operator=current;
                num=0;
            }
        }
        int val=0;
        while(!s1.isEmpty())
        {
            val=val+s1.pop();
        }
        return val;
       
    }
}
=================================================================================================================

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/

class Solution {
    public Node flatten(Node head) {
        for(Node temp=head;temp!=null;temp=temp.next)
        {
            if(temp.child!=null)
            {
                Node nextnode=temp.next;
                temp.next=temp.child;
                temp.next.prev=temp;
                temp.child=null;
                Node tail=temp.next;
                while(tail.next!=null)
                  tail=tail.next;
                tail.next=nextnode;
                if(nextnode!=null)
                nextnode.prev=tail;  
            }
        }
        return head;
  }
        
    }
